
local cjson = require "cjson"
local upload = require "resty.upload"

--get params
if "GET" == ngx.var.request_method then
    ngx.say([[<html>
<head>
    <meta charset="UTF-8">
    <title>Lua-vulnerability</title>
</head>
<body>
<form action="uploadFile" method="post" enctype="multipart/form-data">
<label for="testFileName">select file: </label>
<input type="file" name="testFileName" />
<input type="submit" name="upload" value="Upload" />
</form>
</body>
</html>]])
elseif "POST" == ngx.var.request_method then
    local chunk_size = 4096
    local form, err = upload:new(chunk_size)
    if not form then
        ngx.log(ngx.ERR, "failed to new upload: ",err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end
    form:set_timeout(1000)
    string.split = function(s,p)
        local rt = {}
        string.gsub(s,'[^'..p..']+', function(w) table.insert(rt, w) end)
        return rt
    end
    string.trim = function(s)
        return (s:gsub("^%s*(.-)%s*$", "%1"))
    end
    -- FILE LOCATION
    local saveRootPath = "/home/www/files/"
    local fileToSave
    local ret_save = false
    local a,e = pcall(function()
    while true do
        local typ, res, err = form:read()
        if not typ then
            ngx.say("failed to read: ", err)
            return
        end
        if typ == "header" then
            -- read fileName from header
            local key = res[1]
            local value = res[2]
            if key == "Content-Disposition" then
                -- form-data; name="testFileName"; filename="testfile.txt"
                local kvlist = string.split(value,';')
                for _, kv in ipairs(kvlist) do
                    local seg = string.trim(kv)
                    if seg:find("filename") then
                        local kvfile = string.split(seg, "=")
                        local filename = string.sub(kvfile[2], 2, -2)
                        if filename then
                            fileToSave = io.open(saveRootPath .. filename, "w+")
                            if not fileToSave then
                                ngx.say("failed to open file ", filename)
                                return
                            end
                            break
                        end
                    end
                end
            end
        elseif typ == "body" then
            if fileToSave then
                fileToSave:write(res)
            end
        elseif typ == "part_end" then
            if fileToSave then
                fileToSave:close()
                fileToSave = nil
            end

            ret_save = true
        elseif typ == "eof" then
            break
        else
            ngx.log(ngx.INFO, "do other things")
        end
    end
    end)
    ngx.say(e)
    if ret_save then
        ngx.say("save file ok")
    end
end

